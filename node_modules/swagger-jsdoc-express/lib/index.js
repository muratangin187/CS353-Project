"use strict";
/**
 * This file is part of the swagger-jsdoc-express distribution.
 * Copyright (c) e.GO Digital GmbH, Aachen, Germany (https://www.e-go-digital.com/)
 *
 * swagger-jsdoc-express is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, version 3.
 *
 * swagger-jsdoc-express is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupSwaggerUIFromSourceFiles = void 0;
const deepMerge = require("deepmerge");
const express = require("express");
const fastGlob = require("fast-glob");
const fsExtra = require("fs-extra");
const path = require("path");
const swaggerUi = require("swagger-ui-express");
const yaml = require("js-yaml");
const generate_1 = require("./generate");
const parse_1 = require("./parse");
const utils_1 = require("./utils");
/**
 * Creates (and optionally registers) an Express router for output a Swagge V2 API documentation.
 *
 * @param {SetupSwaggerUIFromSourceFilesOptions} opts The options.
 * @param {express.Express|express.Router} [app] The optional app or router, where to register.
 */
function setupSwaggerUIFromSourceFiles(opts, app) {
    let cwd = utils_1.toStringSafe(opts.cwd);
    if (!path.isAbsolute(cwd)) {
        cwd = path.resolve(process.cwd(), cwd);
    }
    cwd = path.resolve(cwd);
    let filePatterns = utils_1.asArray(opts.files)
        .map(fp => utils_1.toStringSafe(fp))
        .filter(fp => '' !== fp.trim());
    if (!filePatterns.length) {
        filePatterns.push('**/*.js', '**/*.ts');
    }
    const FILE_OPTIONS = deepMerge({
        absolute: true,
        case: false,
        cwd: cwd,
        deep: true,
        dot: false,
        followSymlinkedDirectories: true,
        markDirectories: false,
        nocase: true,
        onlyDirectories: false,
        onlyFiles: true,
        stats: false,
        unique: true,
    }, opts.searchOptions || {});
    const SOURCE_FILES = [];
    const FILE_LIST = fastGlob.sync(filePatterns, FILE_OPTIONS)
        .map(e => utils_1.toStringSafe(e));
    for (const F of FILE_LIST) {
        SOURCE_FILES.push(F);
    }
    const SOURCE_BLOCKS = [];
    SOURCE_FILES.forEach(sf => {
        const SOURCE = fsExtra.readFileSync(sf, 'utf8');
        SOURCE_BLOCKS.push
            .apply(SOURCE_BLOCKS, parse_1.parseSwaggerV2DocBlocks(SOURCE, {
            debug: opts.debug,
        }));
    });
    const SWAGGER_DOC = generate_1.generateSwaggerV2Document(SOURCE_BLOCKS, opts.document);
    let root = utils_1.toStringSafe(opts.root);
    if ('' === root.trim()) {
        root = '/swagger';
    }
    if (!root.trim().startsWith('/')) {
        root = '/' + root;
    }
    let css = utils_1.toStringSafe(opts.css);
    if (utils_1.isEmptyString(css)) {
        css = null;
    }
    let favIcon = utils_1.toStringSafe(opts.favIcon);
    if (utils_1.isEmptyString(favIcon)) {
        favIcon = null;
    }
    let url = utils_1.toStringSafe(opts.url);
    if (utils_1.isEmptyString(url)) {
        url = null;
    }
    let title = utils_1.toStringSafe(opts.title);
    if (utils_1.isEmptyString(title)) {
        title = null;
    }
    const ROUTER = express.Router();
    ROUTER.use('/', swaggerUi.serveFiles(SWAGGER_DOC));
    ROUTER.get('/', swaggerUi.setup(SWAGGER_DOC, null, // opts
    null, // options
    css, // customCss
    favIcon, // customfavIcon
    url, // swaggerUrl
    title));
    // download link (JSON)
    ROUTER.get(`/json`, function (req, res) {
        return res.status(200)
            .header('content-type', 'application/json; charset=utf-8')
            .header('content-disposition', `attachment; filename=api.json`)
            .send(Buffer.from(JSON.stringify(SWAGGER_DOC, null, 2), 'utf8'));
    });
    // download link (YAML)
    ROUTER.get(`/yaml`, function (req, res) {
        return res.status(200)
            .header('content-type', 'application/x-yaml; charset=utf-8')
            .header('content-disposition', `attachment; filename=api.yaml`)
            .send(Buffer.from(yaml.safeDump(SWAGGER_DOC), 'utf8'));
    });
    if (app) {
        app.use(root, ROUTER);
    }
    return ROUTER;
}
exports.setupSwaggerUIFromSourceFiles = setupSwaggerUIFromSourceFiles;
//# sourceMappingURL=index.js.map