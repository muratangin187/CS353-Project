"use strict";
/**
 * This file is part of the swagger-jsdoc-express distribution.
 * Copyright (c) e.GO Digital GmbH, Aachen, Germany (https://www.e-go-digital.com/)
 *
 * swagger-jsdoc-express is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, version 3.
 *
 * swagger-jsdoc-express is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseSwaggerV2DocBlocks = void 0;
const _ = require("lodash");
const doctrine = require("doctrine");
const utils_1 = require("./utils");
const JSDOC_REGEX = /\/\*\*([\s\S]*?)\*\//gm;
function parseJSDoc(code) {
    code = utils_1.toStringSafe(code);
    const COMMENTS = [];
    const RESULTS = code.match(JSDOC_REGEX);
    if (RESULTS) {
        for (const R of RESULTS) {
            COMMENTS.push(doctrine.parse(R, {
                unwrap: true
            }));
        }
    }
    return COMMENTS;
}
/**
 * Extracts / parses Swagger V2 documentation inside JSDoc blocks.
 *
 * @param {string} code The source code with the JSDoc blocks.
 * @param {ParseSwaggerV2DocBlocksOptions} [opts] Additional and custom options.
 *
 * @return {SwaggerV2DocBlock[]} The list of documentation.
 */
function parseSwaggerV2DocBlocks(code, opts) {
    if (_.isNil(opts)) {
        opts = {};
    }
    const DOCS = [];
    const ANNOTATIONS = utils_1.asArray(parseJSDoc(code));
    for (const A of ANNOTATIONS) {
        try {
            const NEW_DOC = {
                description: utils_1.toStringSafe(A.description)
                    .trim(),
                details: undefined,
                jsDoc: A,
                type: undefined,
            };
            const TAGS = utils_1.asArray(A.tags);
            let typeTag = false;
            for (const T of TAGS) {
                const TAG_NAME = utils_1.normalizeString(T.title);
                if (!TAG_NAME.startsWith('swagger')) {
                    continue;
                }
                NEW_DOC.type = TAG_NAME.substr(7)
                    .trim();
                if ('' === NEW_DOC.type) {
                    NEW_DOC.type = undefined;
                }
                typeTag = T;
            }
            if (!typeTag) {
                continue;
            }
            if ('' === NEW_DOC.description) {
                NEW_DOC.description = undefined;
            }
            switch (NEW_DOC.type) {
                case 'definition':
                    {
                        const NEW_DEFINITION_DOC = NEW_DOC;
                        NEW_DEFINITION_DOC.details = utils_1.yamlOrJson(typeTag.description, opts.debug);
                    }
                    break;
                case 'path':
                    {
                        const NEW_PATH_DOC = NEW_DOC;
                        NEW_PATH_DOC.details = utils_1.yamlOrJson(typeTag.description, opts.debug);
                    }
                    break;
            }
            DOCS.push(NEW_DOC);
        }
        catch (e) {
            if (opts.debug) {
                console.error(`swagger-jsdoc-express.parseSwaggerV2DocBlocks(ERROR): '${utils_1.toStringSafe(e)}'`);
            }
        }
    }
    return DOCS;
}
exports.parseSwaggerV2DocBlocks = parseSwaggerV2DocBlocks;
//# sourceMappingURL=parse.js.map