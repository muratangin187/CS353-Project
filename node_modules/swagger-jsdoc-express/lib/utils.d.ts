/**
 * This file is part of the swagger-jsdoc-express distribution.
 * Copyright (c) e.GO Digital GmbH, Aachen, Germany (https://www.e-go-digital.com/)
 *
 * swagger-jsdoc-express is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, version 3.
 *
 * swagger-jsdoc-express is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
/**
 * Keeps sure to return a value as array.
 *
 * @param {T|T[]} val The input value.
 *
 * @return {T[]} The output value.
 */
export declare function asArray<T>(val: T | T[]): T[];
/**
 * Compares two values for sorting, by using a selector.
 *
 * @param {T} x The first value.
 * @param {T} y The second value.
 * @param {Function} selector The function, that selects the value to compare.
 *
 * @return {number} The soirt value.
 */
export declare function compareValuesBy<T, V>(x: T, y: T, selector: (i: T) => V): number;
/**
 * Converts a value to a normalized string and checks if it is empty ('').
 *
 * @param {any} val The value to check.
 *
 * @return {boolean} Is empty string ('') or not.
 */
export declare function isEmptyString(val: any): boolean;
/**
 * Converts a value to a lower case and trimmed string.
 *
 * @param {any} val The input value.
 *
 * @return {string} The output value.
 */
export declare function normalizeString(val: any): string;
/**
 * Creates a cloned version of an object with sorted keys.
 *
 * @param {T} obj The input object.
 *
 * @return {T} The output object with sorted keys.
 */
export declare function sortObjectByKey<T>(obj: any): T;
/**
 * Converts a value to a string, if needed, that is not (null) and (undefined).
 *
 * @param {any} val The input value.
 *
 * @return {string} The output value.
 */
export declare function toStringSafe(val: any): string;
/**
 * Tries to parse an object as YAML or JSON.
 *
 * @param {string} serializedData The serialized (string) data.
 * @param {boolean} [debug] Output errors for debugging or not.
 *
 * @return {T|false} The parsed object or (false) if parsing failed.
 */
export declare function yamlOrJson<T = any>(serializedData: string, debug?: boolean): T | false;
