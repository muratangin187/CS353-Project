"use strict";
/**
 * This file is part of the swagger-jsdoc-express distribution.
 * Copyright (c) e.GO Digital GmbH, Aachen, Germany (https://www.e-go-digital.com/)
 *
 * swagger-jsdoc-express is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, version 3.
 *
 * swagger-jsdoc-express is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.yamlOrJson = exports.toStringSafe = exports.sortObjectByKey = exports.normalizeString = exports.isEmptyString = exports.compareValuesBy = exports.asArray = void 0;
const _ = require("lodash");
const yaml = require("js-yaml");
/**
 * Keeps sure to return a value as array.
 *
 * @param {T|T[]} val The input value.
 *
 * @return {T[]} The output value.
 */
function asArray(val) {
    if (!Array.isArray(val)) {
        val = [val];
    }
    return val.filter(i => !_.isNil(i));
}
exports.asArray = asArray;
/**
 * Compares two values for sorting, by using a selector.
 *
 * @param {T} x The first value.
 * @param {T} y The second value.
 * @param {Function} selector The function, that selects the value to compare.
 *
 * @return {number} The soirt value.
 */
function compareValuesBy(x, y, selector) {
    const VAL_X = selector(x);
    const VAL_Y = selector(y);
    if (VAL_X !== VAL_Y) {
        if (VAL_X < VAL_Y) {
            return -1;
        }
        if (VAL_X > VAL_Y) {
            return 1;
        }
    }
    return 0;
}
exports.compareValuesBy = compareValuesBy;
/**
 * Converts a value to a normalized string and checks if it is empty ('').
 *
 * @param {any} val The value to check.
 *
 * @return {boolean} Is empty string ('') or not.
 */
function isEmptyString(val) {
    return '' === normalizeString(val);
}
exports.isEmptyString = isEmptyString;
/**
 * Converts a value to a lower case and trimmed string.
 *
 * @param {any} val The input value.
 *
 * @return {string} The output value.
 */
function normalizeString(val) {
    return toStringSafe(val)
        .toLowerCase()
        .trim();
}
exports.normalizeString = normalizeString;
/**
 * Creates a cloned version of an object with sorted keys.
 *
 * @param {T} obj The input object.
 *
 * @return {T} The output object with sorted keys.
 */
function sortObjectByKey(obj) {
    if (_.isNil(obj)) {
        return obj;
    }
    const SORTED_OBJ = {};
    for (const KEY of Object.keys(obj).sort((x, y) => compareValuesBy(x, y, i => normalizeString(i)))) {
        let value = obj[KEY];
        if (_.isFunction(value)) {
            value = value.bind(SORTED_OBJ);
        }
        SORTED_OBJ[KEY] = value;
    }
    return SORTED_OBJ;
}
exports.sortObjectByKey = sortObjectByKey;
/**
 * Converts a value to a string, if needed, that is not (null) and (undefined).
 *
 * @param {any} val The input value.
 *
 * @return {string} The output value.
 */
function toStringSafe(val) {
    if (_.isString(val)) {
        return val;
    }
    if (_.isNil(val)) {
        return '';
    }
    if (val instanceof Error) {
        return `[${val.name}] '${val.message}'
        
${val.stack}`;
    }
    if (_.isFunction(val['toString'])) {
        return String(val.toString());
    }
    return String(val);
}
exports.toStringSafe = toStringSafe;
/**
 * Tries to parse an object as YAML or JSON.
 *
 * @param {string} serializedData The serialized (string) data.
 * @param {boolean} [debug] Output errors for debugging or not.
 *
 * @return {T|false} The parsed object or (false) if parsing failed.
 */
function yamlOrJson(serializedData, debug = false) {
    serializedData = toStringSafe(serializedData);
    if ('' === serializedData.trim()) {
        return undefined;
    }
    try {
        try {
            return yaml.safeLoad(serializedData);
        }
        catch (e) {
            if (debug) {
                console.error(`swagger-jsdoc-express.yamlOrJson(ERROR.YAML): '${toStringSafe(e)}'`);
            }
            return JSON.parse(serializedData);
        }
    }
    catch (e) {
        if (debug) {
            console.error(`swagger-jsdoc-express.yamlOrJson(ERROR.JSON): '${toStringSafe(e)}'`);
        }
        return false;
    }
}
exports.yamlOrJson = yamlOrJson;
//# sourceMappingURL=utils.js.map